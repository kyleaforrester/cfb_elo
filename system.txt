This program generates Elo ratings for College Football teams.  The average Elo will be set to 1500.  After a team plays a game, based on the results of the game, their Elo will be adjusted either up or down. The Elo ratings can be used to calculate the expected win-chance between any two teams.

Elo Rating:
The system will uphold the property that a 100 Elo point advantage means that the favored team is predicted to have a 2/3 chance to win the game.  Extrapolating this property to other Elo rating matchups yields the following formula to determine the expected win chance of a given TeamA:
F(eloA, eloB) = 1 / (1 + 2**((eloB - eloA)/100))

Home field advantage:
Home field advantage is generally estimated by most college football experts to be worth about 3 points, as can be seen in popular systems such as Sagarin ratings. According to Boyd's Bets, a 3 point spread historically in college football indicates that the favored team wins 55.6% of the time.  Since Sagarin actually uses a value slightly more than 3, we will assume that win percentage is around 58%, which is about the same as if we added 50 Elo points to the Home team according to our Elo rating formula.  Therefore Home field advantage teams will receive a 50 Elo point boost for each home game.

Game outcomes:
We need a way to convert a game result into a normalized scalar value between 0 and 1 so that it may be compared to the pre-game Elo win prediction.  We will do so by pretending that the teams could have played a million games, and we can only observe one of them, from which we know scoreA and scoreB.  We will say that TeamA will win scoreA/(scoreA+scoreB) of any given scores and likewise for TeamB. In football, since a fieldgoal is worth 3 and a touchdown is worth 7, an average scoring instance is worth 5 points.  Therefore in a game with (scoreA + scoreB) points scored, we had (scoreA + scoreB)/5 scoring instances.  We will then play out a million games between these two teams, with (scoreA + scoreB)/5 instances of scores that will be divided between the two teams, with TeamA having a scoreA/(scoreA+scoreB) chance for each instance and TeamB having a scoreB/(scoreA+scoreB) chance.  We then compare which team won that 'game'.  After playing a million games this way, we can use the resulting score from the actual games to reverse-compute an 'actual' win-percentage for each team based on their final score. An actual mathematical formula can do this calculation for us to compute TeamA's performance-based win percentage based on the scoreInstances, scoreA, and scoreB.  permutationChoose is a separate function that calculates the number of permutations of choosing a smaller subset within a larger set.
F(scoreInstances, scoreA, scoreB) = sum([i * permutationChoose(scoreInstances, i) * (scoreA/(scoreA+scoreB))**i * (scoreB/(scoreA+scoreB))**(scoreInstances - i) for i in range(scoreInstances)])

Elo adjustment:
The difference between the game result's reverse-calculated game result and the pre-game game result is multiplied by each team's learning rate and also multiplied by 150. The Elo rating of each team is then adjusted by this final number. 150 is chosen as the adjustment constant because it upholds the property that TeamA, if predicted with a 2/3 winchance, is defeated by TeamB by a result equivalent to a pre-game 2/3 winchance, then those teams should now be treated as equals.  Both teams will get a ((2/3) - (1/3))*150 = 50 point adjustment, which will bring the initial 100 point Elo gap to 0 gap.

Learning rate adjustment:
Unfortunately college football is a volatile landscape, and due to large inter-seasonal roster turnover, we have great uncertainty about teams at the start of each season. As the season progresses we have more certainty.  Therefore the Elo adjustment should be larger at the beginning of the season and lesser at the end of the season.  The input text file allows the human to reset the learning rate when desired.  The learning rate for each team will decay from the set rate by a factor of 0.5 until it nears an asymptote at value 1 for each game played.  Since teams have byes and different start weeks, two teams playing each other may have different learning rates, which means that in the system, Elo is not a zero-sum game and systemic drift can occur.  Let's say the learning rate has been set to x.  That means that the Elo adjustment will be scaled based on the following formula with an initial rate of x for a team that has played y games:
F(x, y) = (x-1) * (1/2)**y + 1
